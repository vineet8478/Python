
----------------------------------------PL-SQL Blocks-------------------------------------

-- PL/SQL block for printing data
DECLARE
v_sal NUMBER(7,0) := 50000;
BEGIN
v_sal := v_sal*12;
DBMS_OUTPUT.PUT_LINE ('The annual salary is ' ||
                        TO_CHAR(v_sal));
END;



-- PL/SQL block for select statement
DECLARE
v_variable  VARCHAR2(9);
BEGIN
SELECT ename INTO v_variable FROM emp WHERE empno = 7839;
DBMS_OUTPUT.PUT_LINE ('Employee name is: ' || v_variable);
END;



-- PL/SQL block with %type
DECLARE
v_variable emp.ename%type;
BEGIN
SELECT ename INTO v_variable FROM emp WHERE empno = 7839;
DBMS_OUTPUT.PUT_LINE ('Employee name is: ' || v_variable);
END;



-- PL/SQL block with %rowtype
DECLARE
v_variable emp%rowtype;
BEGIN
SELECT * INTO v_variable FROM emp WHERE empno = 7839;
DBMS_OUTPUT.PUT_LINE ('Employee empno is: ' || v_variable.empno);
DBMS_OUTPUT.PUT_LINE ('Employee name is: ' || v_variable.ename);
DBMS_OUTPUT.PUT_LINE ('Employee job is: ' || v_variable.job);
DBMS_OUTPUT.PUT_LINE ('Employee manager is: ' || v_variable.mgr);
DBMS_OUTPUT.PUT_LINE ('Employee hire date is: ' || v_variable.hiredate);
DBMS_OUTPUT.PUT_LINE ('Employee salary is: ' || v_variable.sal);
DBMS_OUTPUT.PUT_LINE ('Employee commission is: ' || v_variable.comm);
DBMS_OUTPUT.PUT_LINE ('Employee dept. no. is: ' || v_variable.deptno);
END;



--commenting code in PL-SQL block
DECLARE
v_sal NUMBER (10,2) := 700000.00;
BEGIN
-- this line is a comment
/* Compute the annual salary based on the       
monthly salary of the user */
v_sal := v_sal * 12;
DBMS_OUTPUT.PUT_LINE ('Salary is: ' ||v_sal);
END;




--inbuilt functions in PL-SQL block
DECLARE
v_ename emp.ename%type;
new_ename v_ename%type;
BEGIN
SELECT ename INTO v_ename FROM emp WHERE empno = 7839;
new_ename := lower(v_ename);
DBMS_OUTPUT.PUT_LINE ('Original Employee name is: ' ||v_ename);
DBMS_OUTPUT.PUT_LINE ('New Employee name is: ' ||new_ename);
END;



--nested blocks and scopes
DECLARE
x  NUMBER := 10;
BEGIN
  DECLARE
    y  NUMBER;
  BEGIN
      y:= x;
      DBMS_OUTPUT.PUT_LINE('inner block');
      DBMS_OUTPUT.PUT_LINE(x);
      DBMS_OUTPUT.PUT_LINE(y);
  END;
    DBMS_OUTPUT.PUT_LINE('inner block');
    DBMS_OUTPUT.PUT_LINE(x);
    -- below line creates an error
    --DBMS_OUTPUT.PUT_LINE(y);
END;





-- block qualifier
<<outer>>
DECLARE
    v1 number := 10;
BEGIN
    DECLARE
    v1 number := 20;
    BEGIN
       DBMS_OUTPUT.PUT_LINE(outer.v1);
       DBMS_OUTPUT.PUT_LINE(v1);
   END;
END;


--operators in PL-SQL (simple arithmetic operation)
DECLARE
    v1 number := 10;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Before operation: ' || v1);
    v1 := v1 + 1;
    DBMS_OUTPUT.PUT_LINE('After Operation: ' || v1);
END;



--operators in PL-SQL
DECLARE
    v1 number := 10;
    v2 number := 20;
    v3 number;
BEGIN
    v3 := v1 * v2;
    DBMS_OUTPUT.PUT_LINE(v3);
    v3 := (v1 / v2);
    DBMS_OUTPUT.PUT_LINE(v3);
END;



----------------------------------- Conditional Statements-----------------------------------------

--conditional Statements (Simple IF-THEN)
DECLARE
    v1 number := 10;
    v2 number := 20;
BEGIN
    IF v1 < v2 THEN
        DBMS_OUTPUT.PUT_LINE('V2 is Greater than V1');
    END IF;
END;



--conditional Statements (Compound IF-THEN)
DECLARE
    v1 number := 10;
    v2 number := 20;
BEGIN
    IF v1 < v2 AND v2 > 0 THEN
        DBMS_OUTPUT.PUT_LINE('V2 is Greater than V1 and it is Positive number');
    END IF;
END;




--conditional Statements (IF-THEN-ELSE)
DECLARE
    v1 number := 30;
    v2 number := 20;
BEGIN
    IF v1 < v2 THEN
        DBMS_OUTPUT.PUT_LINE('V2 is Greater than V1');
    ELSE
        DBMS_OUTPUT.PUT_LINE('V1 is Greater than V2');
    END IF;
END;




--conditional Statements (IF-THEN-ELSIF)
DECLARE
    v1 number := 00;
BEGIN
    IF v1 > 0 THEN
        DBMS_OUTPUT.PUT_LINE('V1 is the Positive integer');
    ELSIF v1 < 0 THEN
        DBMS_OUTPUT.PUT_LINE('V1 is the Negative integer');
    ELSE
        DBMS_OUTPUT.PUT_LINE('V1 is ZERO');
    END IF;
END;



-- conditional Statements (CASE)
DECLARE
   v_grade CHAR(1) := 'D';
   v_evaluation VARCHAR2(10);
BEGIN
    v_evaluation := 
      CASE v_grade
         WHEN 'A' THEN 'Excellent'
         WHEN 'B' THEN 'Good'
         WHEN 'C' THEN 'Fair'
         ELSE 'Fail'
      END;
DBMS_OUTPUT.PUT_LINE ('Grade: '|| v_grade || '             Evaluation: ' || v_evaluation);
END;



-- Conditional Statements (NULL)
Declare
    v1 boolean := NULL;
Begin
    If v1 IS NULL then -- NULL values at comparison
        DBMS_OUTPUT.PUT_LINE('V1 is NULL');
    Else
        DBMS_OUTPUT.PUT_LINE('V1 is NOT NULL');
    END IF;
END;




-- Logical operators behaviour with NULL
Declare
    v1 boolean := NULL;
    v2 boolean;
Begin
    v2 := Not v1;
    DBMS_OUTPUT.PUT_LINE('NOT NULL: ' || CASE WHEN v2 THEN 'TRUE'WHEN NOT v2 THEN 'FALSE' ELSE 'NULL' END);
    
    v2 := True and v1;
    DBMS_OUTPUT.PUT_LINE('TRUE AND NULL : ' || CASE WHEN v2 THEN 'TRUE'WHEN NOT v2 THEN 'FALSE' ELSE 'NULL' END);
    
    v2 := False and v1;
    DBMS_OUTPUT.PUT_LINE('FALSE AND NULL : ' || CASE WHEN v2 THEN 'TRUE'WHEN NOT v2 THEN 'FALSE' ELSE 'NULL' END);
    
    v2 := True or v1;
    DBMS_OUTPUT.PUT_LINE('TRUE or NULL : ' || CASE WHEN v2 THEN 'TRUE'WHEN NOT v2 THEN 'FALSE' ELSE 'NULL' END);
    
    v2 := False or v1;
    DBMS_OUTPUT.PUT_LINE('FALSE or NULL : ' || CASE WHEN v2 THEN 'TRUE'WHEN NOT v2 THEN 'FALSE' ELSE 'NULL' END);
End;





-------------------------------------Loops----------------------------------------------------


    --Basic Loop: example-1
DECLARE
    v1 number := 0;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE(v1);
        v1 := v1 + 1;
        EXIT WHEN v1 > 5;
    END LOOP;
END;



--Basic Loop: example-2
create table square(Num number, Square number);

DECLARE
    v1 number := 1;
BEGIN
    LOOP
        insert into square values(v1, v1*v1);
        v1 := v1 + 1;
        EXIT WHEN v1 > 5;
    END LOOP;
END;

select * from square;



-- while loop: example-1
DECLARE
    v1 number := 0;
BEGIN
    WHILE v1 <=5 LOOP
        DBMS_OUTPUT.PUT_LINE(v1);
        v1 := v1 + 1;
    END LOOP;
END;



-- while loop: example-2
DECLARE
    v1 number := 10;
BEGIN
    WHILE v1 >= 0 LOOP
        DBMS_OUTPUT.PUT_LINE(v1);
        v1 := v1 - 2;
    END LOOP;
END;



-- for loop: example-1
DECLARE
    v1 number := 10;
BEGIN
    for i IN 1..5 LOOP
        DBMS_OUTPUT.PUT_LINE(i);
    END LOOP;
END;


-- for loop: example-2
DECLARE
    v1 number := 10;
BEGIN
    for i IN reverse 1..5 LOOP
        DBMS_OUTPUT.PUT_LINE(i);
    END LOOP;
END;


-- nested loop: example
DECLARE
    v1 number := 0;
    v2 number := 0;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE('Processing: ' || v1);
        v2 := v1;
        LOOP
            DBMS_OUTPUT.PUT_LINE(v1 * v1);
            v2 := v2 + 1; 
            EXIT WHEN v2 >= 5;
        END LOOP;
        v1 := v1 + 1;
        EXIT WHEN v1 >= 5;
    END LOOP;
END;





